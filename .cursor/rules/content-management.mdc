---
description: 
globs: 
alwaysApply: true
---
# 课程内容管理指南

## 内容结构

### Web3开发课程
位置：`docs/web3-development/`
- 7个主要章节（chapter-one 到 chapter-seven）
- 每个章节包含23个课程文件（01.md - 23.md）
- 每个章节都有 `intro.md` 介绍文件
- 特殊章节：chapter-one-six（包含12个子课程）

### Web3市场营销课程
位置：`docs/web3-operation/`
- 学习手册：`learning-manual/`
- 按章节组织课程内容
- 包含丰富的图片资源

## 文件命名规范

### 课程文件
- 使用数字编号：`01.md`, `02.md`, `03.md` 等
- 章节介绍：`intro.md`
- 章节结束：`end.md`（仅部分章节）

### 图片资源
- 课程图片：`docs/web3-development/img/`
- 运营课程图片：`docs/web3-operation/learning-manual/img/`
- 静态资源：`static/img/`

## 内容编辑指南

### Markdown格式
- 使用标准Markdown语法
- 支持MDX扩展功能
- 图片引用使用相对路径

### 课程结构
每个课程文件应包含：
1. 标题（H1）
2. 课程目标
3. 主要内容
4. 实践练习
5. 总结

### 侧边栏配置
[sidebars.ts](mdc:sidebars.ts) 控制课程在网站中的显示结构：
- 定义章节层级
- 设置课程顺序
- 配置导航链接

## 内容更新流程

### 添加新课程
1. 在对应章节目录下创建新的 `.md` 文件
2. 使用正确的数字编号命名
3. 在 [sidebars.ts](mdc:sidebars.ts) 中添加配置
4. 确保内容格式符合规范

### 修改现有课程
1. 直接编辑对应的 `.md` 文件
2. 保持文件命名不变
3. 更新内容后测试显示效果

### 添加图片资源
1. 将图片放入对应的 `img/` 目录
2. 在Markdown中使用相对路径引用
3. 确保图片格式和大小适合网页显示

## 内容质量控制
- 确保所有链接有效
- 检查图片显示正常
- 验证Markdown语法正确
- 测试侧边栏导航功能

# 内容管理

## 博客管理

### 博客文件位置
- 博客目录：[blog/](mdc:blog)
- 作者配置：[blog/authors.yml](mdc:blog/authors.yml)
- 标签配置：[blog/tags.yml](mdc:blog/tags.yml)

### 创建新博客
1. 在 [blog/](mdc:blog) 目录创建 `.md` 或 `.mdx` 文件
2. 文件名格式：`YYYY-MM-DD-title.md`
3. 添加前置元数据：

```markdown
---
slug: my-blog-post
title: 博客标题
authors: [authorName]
tags: [tag1, tag2]
---

博客内容...
```

### 博客功能
- 支持Markdown和MDX格式
- 自动生成阅读时间
- RSS和Atom订阅源
- 标签和作者分类

## 文档管理

### 文档结构
- 文档目录：[docs/](mdc:docs)
- 侧边栏配置：[sidebars.ts](mdc:sidebars.ts)
- 分类配置：`_category_.json` 文件

### 创建新文档
1. 在 [docs/](mdc:docs) 目录创建 `.md` 文件
2. 更新 [sidebars.ts](mdc:sidebars.ts) 添加导航
3. 使用相对路径链接其他文档

### 文档组织
```
docs/
├── intro.md                    # 文档首页
├── tutorial-basics/            # 基础教程
│   ├── _category_.json        # 分类配置
│   ├── create-a-document.md
│   └── markdown-features.mdx
└── tutorial-extras/            # 进阶教程
    ├── _category_.json
    └── manage-docs-versions.md
```

## 页面内容

### 页面组件
- 页面目录：[src/pages/](mdc:src/pages)
- 样式文件：对应的 `.module.css` 文件

### 内容更新流程
1. 修改页面组件文件
2. 更新对应的样式文件
3. 测试页面显示效果
4. 提交代码变更

### 多语言支持
- 当前配置：中文简体 (`zh-CN`)
- 国际化配置在 [docusaurus.config.ts](mdc:docusaurus.config.ts)
- 文本内容使用中文

## 图片资源

### 图片管理
- 静态图片：[static/img/](mdc:static/img)
- 支持的格式：PNG, JPG, SVG, WebP
- 建议尺寸和压缩优化

### 图片使用
```typescript
// 在组件中引用图片
<img src="/img/logo.png" alt="Logo" />

// 在Markdown中引用图片
![图片描述](mdc:img/image.png)
```

## SEO优化

### 元数据配置
- 页面标题和描述
- Open Graph标签
- 结构化数据

### 内容优化
- 使用语义化HTML标签
- 添加适当的alt属性
- 优化页面加载速度

## 内容审核

### 质量检查
- 拼写和语法检查
- 链接有效性验证
- 图片alt属性完整性
- 响应式设计测试

### 发布流程
1. 内容编写和编辑
2. 本地预览测试
3. 代码审查
4. 部署和验证



